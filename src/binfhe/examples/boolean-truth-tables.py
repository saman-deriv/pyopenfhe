import binfhe

cc = binfhe.BinFHEContext()
cc.GenerateBinFHEContext(binfhe.STD128, binfhe.GINX)

sk = cc.KeyGen()
cc.BTKeyGen(sk, binfhe.SYM_ENCRYPT)

ni = binfhe.NativeInteger()

ct10 = cc.Encrypt(sk, 1, binfhe.BOOTSTRAPPED, 4, ni)
ct11 = cc.Encrypt(sk, 1, binfhe.BOOTSTRAPPED, 4, ni)
ct00 = cc.Encrypt(sk, 0, binfhe.BOOTSTRAPPED, 4, ni)
ct01 = cc.Encrypt(sk, 0, binfhe.BOOTSTRAPPED, 4, ni)

############
ctNAND1 = cc.EvalBinGate(binfhe.NAND, ct10, ct11)
ctNAND2 = cc.EvalBinGate(binfhe.NAND, ct10, ct01)
ctNAND3 = cc.EvalBinGate(binfhe.NAND, ct00, ct01)
ctNAND4 = cc.EvalBinGate(binfhe.NAND, ct00, ct11)
result = cc.Decrypt(sk, ctNAND1, 4)
print(result)
result = cc.Decrypt(sk, ctNAND2, 4)
print(result)
result = cc.Decrypt(sk, ctNAND3, 4)
print(result)
result = cc.Decrypt(sk, ctNAND4, 4)
print(result)

############
ctAND1 = cc.EvalBinGate(binfhe.AND, ct10, ct11)
ctAND2 = cc.EvalBinGate(binfhe.AND, ct10, ct01)
ctAND3 = cc.EvalBinGate(binfhe.AND, ct00, ct01)
ctAND4 = cc.EvalBinGate(binfhe.AND, ct00, ct11)
result = cc.Decrypt(sk, ctAND1, 4)
print("1 AND 1 = ", result)
result = cc.Decrypt(sk, ctAND2, 4)
print("1 AND 0 = ", result)
result = cc.Decrypt(sk, ctAND3, 4)
print("0 AND 0 = ", result)
result = cc.Decrypt(sk, ctAND4, 4)
print("0 AND 1 = ", result)

##############
ctOR1 = cc.EvalBinGate(binfhe.OR, ct10, ct11)
ctOR2 = cc.EvalBinGate(binfhe.OR, ct10, ct01)
ctOR3 = cc.EvalBinGate(binfhe.OR, ct00, ct01)
ctOR4 = cc.EvalBinGate(binfhe.OR, ct00, ct11)
result = cc.Decrypt(sk, ctOR1, 4)
print("1 OR 1 = ", result)
result = cc.Decrypt(sk, ctOR2, 4)
print("1 OR 0 = ", result)
result = cc.Decrypt(sk, ctOR3, 4)
print("0 OR 0 = ", result)
result = cc.Decrypt(sk, ctOR4, 4)
print("0 OR 1 = ", result)

############
ctNOR1 = cc.EvalBinGate(binfhe.NOR, ct10, ct11)
ctNOR2 = cc.EvalBinGate(binfhe.NOR, ct10, ct01)
ctNOR3 = cc.EvalBinGate(binfhe.NOR, ct00, ct01)
ctNOR4 = cc.EvalBinGate(binfhe.NOR, ct00, ct11)
result = cc.Decrypt(sk, ctNOR1, 4)
print("1 NOR 1 = ", result)
result = cc.Decrypt(sk, ctNOR2, 4)
print("1 NOR 0 = ", result)
result = cc.Decrypt(sk, ctNOR3, 4)
print("0 NOR 0 = ", result)
result = cc.Decrypt(sk, ctNOR4, 4)
print("0 NOR 1 = ", result)

###########
ctXOR1 = cc.EvalBinGate(binfhe.XOR, ct10, ct11)
ctXOR2 = cc.EvalBinGate(binfhe.XOR, ct10, ct01)
ctXOR3 = cc.EvalBinGate(binfhe.XOR, ct00, ct01)
ctXOR4 = cc.EvalBinGate(binfhe.XOR, ct00, ct11)
result = cc.Decrypt(sk, ctXOR1, 4)
print("1 XOR 1 = ", result)
result = cc.Decrypt(sk, ctXOR2, 4)
print("1 XOR 0 = ", result)
result = cc.Decrypt(sk, ctXOR3, 4)
print("0 XOR 0 = ", result)
result = cc.Decrypt(sk, ctXOR4, 4)
print("0 XOR 1 = ", result)

#############
ctXNOR1 = cc.EvalBinGate(binfhe.XNOR, ct10, ct11)
ctXNOR2 = cc.EvalBinGate(binfhe.XNOR, ct10, ct01)
ctXNOR3 = cc.EvalBinGate(binfhe.XNOR, ct00, ct01)
ctXNOR4 = cc.EvalBinGate(binfhe.XNOR, ct00, ct11)
result = cc.Decrypt(sk, ctXNOR1, 4)
print("1 XNOR 1 = ", result)
result = cc.Decrypt(sk, ctXNOR2, 4)
print("1 XNOR 0 = ", result)
result = cc.Decrypt(sk, ctXNOR3, 4)
print("0 XNOR 0 = ", result)
result = cc.Decrypt(sk, ctXNOR4, 4)
print("0 XNOR 1 = ", result)

#####
ctXOR1_FAST = cc.EvalBinGate(binfhe.XOR_FAST, ct10, ct11)
ctXOR2_FAST = cc.EvalBinGate(binfhe.XOR_FAST, ct10, ct01)
ctXOR3_FAST = cc.EvalBinGate(binfhe.XOR_FAST, ct00, ct01)
ctXOR4_FAST = cc.EvalBinGate(binfhe.XOR_FAST, ct00, ct11)
result = cc.Decrypt(sk, ctXOR1_FAST, 4)
print("1 XOR_FAST 1 = ", result)
result = cc.Decrypt(sk, ctXOR2_FAST, 4)
print("1 XOR_FAST 0 = ", result)
result = cc.Decrypt(sk, ctXOR3_FAST, 4)
print("0 XOR_FAST 0 = ", result)
result = cc.Decrypt(sk, ctXOR4_FAST, 4)
print("0 XOR_FAST 1 = ", result)

#########
ctXNOR1_FAST = cc.EvalBinGate(binfhe.XNOR_FAST, ct10, ct11)
ctXNOR2_FAST = cc.EvalBinGate(binfhe.XNOR_FAST, ct10, ct01)
ctXNOR3_FAST = cc.EvalBinGate(binfhe.XNOR_FAST, ct00, ct01)
ctXNOR4_FAST = cc.EvalBinGate(binfhe.XNOR_FAST, ct00, ct11)
result = cc.Decrypt(sk, ctXNOR1_FAST, 4)
print("1 XNOR_FAST 1 = ", result)
result = cc.Decrypt(sk, ctXNOR2_FAST, 4)
print("1 XNOR_FAST 0 = ", result)
result = cc.Decrypt(sk, ctXNOR3_FAST, 4)
print("0 XNOR_FAST 0 = ", result)
result = cc.Decrypt(sk, ctXNOR4_FAST, 4)
print("0 XNOR_FAST 1 = ", result)
